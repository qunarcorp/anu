import { Platform } from '../../consts/platforms';
declare let utils: {
    on(): void;
    emit(): void;
    spinner(text: string): any;
    getStyleValue: any;
    useYarn(): any;
    shortcutOfCreateElement(): string;
    getNodeName(node: any): any;
    getEventName(eventName: string, nodeName: string, buildType: string): string;
    createElement(nodeName: string, attrs: Array<any>, children: any): any;
    createNodeName(map: any, backup: any): (astPath: any, modules: any) => any;
    createAttribute(name: string, value: babel.Node | string): any;
    createUUID(astPath: any): any;
    createDynamicAttributeValue(prefix: string, astPath: any, indexes: any): any;
    genKey(key: string): string;
    getAnu(state: any): any;
    isLoopMap(astPath: any): boolean;
    createMethod(path: any, methodName: string): any;
    exportExpr(name: string, isDefault?: boolean): any;
    isNpm: any;
    createRegisterStatement(className: string, path: any, isPage?: boolean): any;
    installer(npmName: string, dev?: string, needModuleEntryPath?: boolean): Promise<unknown>;
    getDistName(buildType: string): any;
    getDeps(messages?: Array<any>): any[];
    getComponentOrAppOrPageReg(): RegExp;
    hasNpm(npmName: string): boolean;
    decodeChinise: any;
    isWebView(fileId: string): any;
    parseCamel: any;
    uniquefilter(arr: any, key?: string): any;
    isWin: () => any;
    sepForRegex: string;
    fixWinPath(p: string): string;
    isMportalEnv(): any;
    cleanLog(log: string): string;
    validatePlatform(platform: string, platforms: Array<Platform>): boolean;
    customizer(objValue: any, srcValue: any): any[];
    deepMerge(...args: any): any;
    getStyleNamespace(dirname: string): string;
    isCheckQuickConfigFileExist(configFile: string): boolean;
};
export default utils;
